Report 5/13/21
Development on the first prototype has been completed. My own research, focusing on the concepts of dynamically creating and modifying HTML elements and event listeners, was applied primarily to the js scripts for the "home" page and the "interests" page.

The javascript language has many built-in handlers for interacting with HTML elements. Any element which already exists on the page can be addressed using its provided id. Once the object has been identified, it can be deleted through object.remove(), or its children can be deleted any number of times through object.removeChild(object.firstChild). A new element can be created through document.createElement("type"), and such created elements can be parented to one another or to existing elements through parent.appendChild(child). An object which has been identified can also have an event listener added prior to its placement on the web page through object.eventListener("type", (event) => ...

All of this information was able to be integrated in straighforward ways with information learned about Firebase in previous research to create a system which communicates directly between the user and the database.

The SRS has also been updated.

Sources:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference
https://www.javascripttutorial.net/dom/manipulating/remove-all-child-nodes/

Report 4/29/21
Research has continued on Firebase Authentication features and implementation. My own research was applied to create the "profile-page-edit-script" file, which communicates directly with the database using authenticated user information. Additionally, a rough draft of the SRS has been completed. All changes are included.

Sources:
firebase.google.com/docs/auth/web/manage-users
https://www.youtube.com/playlist?list=PL4cUxeGkcC9itfjle0ji1xOZ2cjRGY_WB

Report 4/14/21
Most project time was spent finalizing and delivering a presentation of the project. Additionally, HTML mockups of several app pages have been created and included. The SRS is also much closer to completion.

Report 4/1/21
Most project time was spent preparing and practicing for an upcoming presentation of the project. The slideshow has been included. The SRS has also been worked on and updated.

Other team members have been putting together the beginnings of the login page for the project, which has been included.

Report 3/18/21
After some failed experimentation and multiple technical issues with mySQL, the group agreed to switch over to Google Firebase as an alternative database management system. Firebase is expected to have better integration with HTML/Javascript, and a more straightforward set of tools for creating and managing the database which won't require the advisor to act as a go-between. Work on a user login system via Firebase Authentication has begun. An example of its implementation has been provided by team member Samuel J., included in the sources below.

Firebase Firestore is being used to store the data that logged-in users will be able to access. Firestore databases store information as a collection of documents, each of which contains a set of key-value pairs. This data can be accessed either directly through Firebase's front-end SDK, or through through HTML/Javascript calls, which we can implement into our web page.

Time has also been spent working on the project SRS, an incomplete version of which has now been included in the repository.

Sources:
https://sliceofblue-d8622.firebaseapp.com/
https://firebase.google.com/
https://www.youtube.com/watch?v=aN1LnNq4z54&list=PL4cUxeGkcC9jUPIes_B8vRjn1_GaplOPQ
https://www.youtube.com/watch?v=4d-gIPGzmK4&list=PL4cUxeGkcC9itfjle0ji1xOZ2cjRGY_WB

Report 3/4/21
Because the server for our web app is maintained by the university, some unique steps are required to establish and maintain a database through the app. I, and other developers on the team, must install a database management application, such as mySQL Workbench. Our project advisor, the faculty member who established the space where the app is being hosted, will need to create the databse through the cPanel system where the web page is managed. They must then use cPanel to whitelist the IP addresses of myself and the other developers.

I have provided my IP address and database account information to the advisor. I have also installed mySQL Workbench, and begun experimenting with its basic functions.

From here, some modifications will need to be made to the project files in order to access the database, which is planned to be worked on in the coming weeks.

Some time was also spent researching recent standards for SRS documents to ensure that our own is formatted correctly. I was surprised to find that the standards have not been modified in quite a long time. Formatting has been done, but the document is not yet in a presentable state, and has not been included.

Sources:
https://www.hostgator.com/help/article/how-do-i-create-a-mysql-database-a-user-and-then-delete-if-needed
https://www.hostgator.com/help/article/managing-your-database-with-applications
https://www.hostgator.com/help/article/how-to-connect-to-the-mysql-database
https://www.mysql.com/products/workbench/
http://www.cse.msu.edu/~cse870/IEEEXplore-SRS-template.pdf

Report 2/18/21

The university "myCoyote" system uses a single sign-on program, SSO, hosted by Shibboleth IdP. Shibboleth is an implementation of the Security Assertion Markup Language 2.0, or SAML2, which is a standard for the exchange of XML documents between a service provider, such as the University's myCoyote, and an identity provider, such as Shibboleth IdP. By communicating with an identity provider in this way, the service provider can obtain basic information about the user, such as the student's name, CoyoteID, and email address, without ever dealing with the user's password or other secure information.

In order to interact with the Shibboleth Identity Provider, the service provider, that being the HonorsBook program in my case, must have downloaded the Shibboleth Service Provider package, which has been done in my local copy of the app. Once the package is included, the configuration must be modified to match the specific app being developed. This information is contained in the shibboleth2.xml file, much of which has already been modified appropriately using the app's URL, as well as the EntityID and metadata source used by the university system.

At this point, the information available to me begins to exceed my level of understanding. By my understanding, there are two important steps remaining. Firstly, my app's metadata must be added to the metadata feed used by the university. This would require me to generate the app's metadata, which I am still unsure of how to do. Then I may either submit that data along with the app's URL to the InCommon Federation, which I know very little about, or submitting the data directly to the university by including it in a BitBucket pull request, which I would feel more comfortable doing, assuming that I had that data to give and understood what to do with it. Secondly, once the metadata is where it belongs, the app would have to be programmed with an automatic redirect to the Shibboleth IdP for login. Shibboleth would automatically redirect the user back to the app once they have signed in, and the user's id can then be read to show them their appropriate profile within the app. I have yet to find any information regarding how this would be accomplished. I am unsure of if a simple HTML redirect command to a particular URL would be sufficient, or if additional data must be sent at the same time. Either way, I can't seem to find what that URL would be.

These two steps may be the primary focus of my research in the immediate future.

Unfortunately, as our team has recently lost a member, there is a likelihood that this pursuit may be dropped in order to save time. If that is the case, my next task will most likely be work on the planned tagging system, in addition to continued work on the Software Requirements Specification Document.

Sources:
https://slack-files.com/T0YRQHDC1-FLW61AUL9-aaf4d1eefb
https://wiki.shibboleth.net/confluence/display/SP3/Home
https://spaces.at.internet2.edu/display/federation/